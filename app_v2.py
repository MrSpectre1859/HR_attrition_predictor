import streamlit as st
import pandas as pd
import numpy as np
import random
import joblib
import shap
import matplotlib.pyplot as plt
from openai import OpenAI
from openai import APIError, APIConnectionError, RateLimitError

# Defini√ß√£o de categorias reais do dataset
BUSINESS_TRAVEL = ["Travel_Rarely", "Travel_Frequently", "Non-Travel"]
DEPARTMENTS = ["Sales", "Research & Development", "Human Resources", "Marketing"]
EDUCATION_FIELDS = ["Life Sciences", "Other", "Medical", "Marketing", "Technical Degree", "Human Resources"]
JOB_ROLES = ["Sales Executive", "Research Scientist", "Laboratory Technician", "Manufacturing Director",
             "Healthcare Representative", "Manager", "Sales Representative", "Research Director", "Human Resources"]
MARITAL_STATUS = ["Single", "Married", "Divorced"]

# Inicializando os dados no session_state se n√£o existirem
if "funcionarios" not in st.session_state:
    st.session_state.funcionarios = pd.DataFrame(columns=[
        "EmployeeNumber", "Age", "BusinessTravel", "Department", "DistanceFromHome",
        "Education", "EducationField", "EnvironmentSatisfaction", "Gender", "HourlyRate",
        "JobInvolvement", "JobLevel", "JobRole", "JobSatisfaction", "MaritalStatus",
        "MonthlyIncome", "MonthlyRate", "NumCompaniesWorked", "Over18", "OverTime",
        "PercentSalaryHike", "PerformanceRating", "RelationshipSatisfaction",
        "StockOptionLevel", "TotalWorkingYears", "TrainingTimesLastYear",
        "WorkLifeBalance", "YearsAtCompany", "YearsInCurrentRole", "YearsSinceLastPromotion",
        "YearsWithCurrManager"
    ])

# -------------------------------------------------------------
# CONFIGURA√á√ÉO GERAL DA P√ÅGINA
# -------------------------------------------------------------
st.set_page_config(
    page_title="People Analytics",
    layout="wide"
)

# -------------------------------------------------------------
# P√ÅGINA: HOME
# -------------------------------------------------------------
def page_home():
    st.title("Bem-vindo ao People Analytics")

    col1, col2, col3, col4, col5 = st.columns([1, 1, 1, 1, 1], gap="large")

    # Sobre
    with col1:
        with st.container():
            st.markdown(
                "<div style='background-color: #17428C; padding: 20px; border-radius: 10px; text-align: center;'>"
                "<h3 style='color: white;'>Sobre</h3>"
                "<p style='color: white;'>Saiba mais sobre o projeto, o dataset e os desafios de ML em RH.</p>"
                "</div>",
                unsafe_allow_html=True
            )
            if st.button("Ir para Sobre", key="btn_sobre"):
                st.session_state.page = "Sobre"

    # Cadastro de Funcion√°rios
    with col2:
        with st.container():
            st.markdown(
                "<div style='background-color: #67B9B0; padding: 20px; border-radius: 10px; text-align: center;'>"
                "<h3 style='color: white;'>Cadastro</h3>"
                "<p style='color: white;'>Cadastre novos funcion√°rios na base de dados</p>"
                "</div>",
                unsafe_allow_html=True
            )
            if st.button("Ir para Cadastro", key="btn_cadastro"):
                st.session_state.page = "Cadastro"
    
    with col3:
        with st.container():
            st.markdown(
                "<div style='background-color: #E5531A; padding : 20px; border-radius: 10px; text-align: center;'>"
                "<h3 style='color: white;'> Cat√°logo</h3>"
                "<p style='color: wite;'> Veja a lista completa de funcion√°rios da sua empresa</p>"
                "</div>",
                unsafe_allow_html=True
            )
            if st.button("Cat√°logo", key="btn_catalogo"):
                st.session_state.page = 'Cat√°logo'

    # Analytics
    with col4:
        with st.container():
            st.markdown(
                "<div style='background-color: #CE1431; padding: 20px; border-radius: 10px; text-align: center;'>"
                "<h3 style='color: white;'>Analytics</h3>"
                "<p style='color: white;'>Visualize an√°lises avan√ßadas, predi√ß√µes e explica√ß√µes do modelo</p>"
                "</div>",
                unsafe_allow_html=True
            )
            if st.button("Ir para Analytics", key="btn_analytics"):
                st.session_state.page = "Analytics"
    
    # Chat com IA
    with col5:
        with st.container():
            st.markdown(
                "<div style='background-color: #1A73E8; padding: 20px; border-radius: 10px; text-align: center;'>"
                "<h3 style='color: white;'>Chat com IA</h3>"
                "<p style='color: white;'>Converse com a IA sobre seus funcion√°rios e previs√µes</p>"
                "</div>",
                unsafe_allow_html=True
            )
            if st.button("Ir para Chat", key="btn_chat"):
                st.session_state.page = "Chat"


# -------------------------------------------------------------
# P√ÅGINA: SOBRE
# -------------------------------------------------------------
def page_sobre():
    st.title("Sobre o Projeto")

    # Vis√£o Geral
    st.subheader("üìå Vis√£o Geral")
    st.write(
        "O **People Analytics - Predi√ß√£o de Sa√≠da de Funcion√°rios** foi desenvolvido com o intuito de simular uma ferramenta "
        "interativa e inteligente de an√°lise preditiva de turnover. Al√©m disso, ela foi constru√≠da com o intuito de fomentar o uso de metodologias e "
        "ferramentas tecnol√≥gicas no RH, visando uma tomada de decis√£o baseada em dados e menos 'feeling'.\n\n"
        "Voc√™ poder√° explorar o cat√°logo de funcion√°rios e cadastrar novos, realizar previs√µes sobre o risco de sa√≠da e "
        "interpretar os resultados. Al√©m disso, √© poss√≠vel interagir com um **Chatbot** que utiliza o modelo **GPT-4-Turbo** "
        "para conversar sobre os funcion√°rios e seus contextos."
    )

    # Tecnologias Utilizadas
    st.subheader("üöÄ Tecnologias Utilizadas")
    st.write(
        "- **Python** üêç\n"
        "- **Streamlit** (Interface Web)\n"
        "- **Pandas** (Manipula√ß√£o de dados)\n"
        "- **Scikit-learn** (Treinamento do modelo)\n"
        "- **SHAP** (Explicabilidade do modelo)\n"
        "- **OpenAI API** (Chatbot com GPT-4-Turbo)\n"
        "- **Plotly & Matplotlib** (Gr√°ficos)\n"
        "- **AWS EC2** (Hospedagem do aplicativo)"
    )

    # Objetivos Principais
    st.subheader("üéØ Objetivos Principais")
    st.write(
        "- Desenvolver um **modelo preditivo** capaz de identificar a probabilidade de sa√≠da de um funcion√°rio (turnover) utilizando **Machine Learning**;\n"
        "- Criar um **dashboard** com visualiza√ß√µes detalhadas sobre alguns indicadores utilizados comumente pelo RH e pela gest√£o;\n"
        "- **Explicar as previs√µes** do modelo com o uso de **SHAP** para auxiliar a compreens√£o do RH;\n"
        "- Implementar um **chatbot inteligente** com o modelo GPT-4, permitindo intera√ß√µes personalizadas;\n"
        "- Fomentar o desenvolvimento de RH baseado em dados e mais tech."
    )

    # Sobre o Dataset
    st.subheader("üìä Sobre o Dataset")
    st.write(
        "Os dados utilizados s√£o do **IBM HR Analytics Employee Attrition & Performance**, dispon√≠vel no Kaggle. "
        "Este dataset cont√©m informa√ß√µes detalhadas sobre funcion√°rios, incluindo idade, departamento, anos na empresa, "
        "sal√°rio, envolvimento no trabalho e se o funcion√°rio saiu da empresa (vari√°vel target: *Attrition*)."
    )

    # Desafios do uso de Machine Learning em RH
    st.subheader("‚ö†Ô∏è Desafios do Uso de Machine Learning em RH")
    st.write(
        "- **Dados Sens√≠veis**: Privacidade e √©tica s√£o fundamentais ao analisar dados de funcion√°rios.\n"
        "- **Vi√©s Algor√≠tmico**: Modelos podem amplificar desigualdades existentes se n√£o forem bem treinados.\n"
        "- **Interpreta√ß√£o das Predi√ß√µes**: Decis√µes n√£o devem ser tomadas apenas com base no modelo, mas sim como um apoio √† gest√£o."
    )

    # Sobre Mim (Foto e Contatos)
    st.subheader("üë§ Sobre Mim")
    st.image("eu.jpeg", width=150, caption="Eu")

    st.write(
        "üëã Ol√°! Meu nome √© **Alison Machado Ces√°rio**, sou Bacharel em Psicologia pela Universidade Federal Fluminense (UFF) e p√≥s-graduando no MBA de Data Science e Analytics pela USP/ESALQ. "
        "Sou completamente apaixonado por tecnologia, inova√ß√£o, dados e estou constantemente buscando algo novo para poder aprender. Comecei na programa√ß√£o em 2018 estudando Python 3 atrav√©s as aulas do Prof. Guanabara no Curso em V√≠deo e"
        " desde ent√£o n√£o consegui parar.\n\n"
        "Minhas compet√™ncias:\n\n"
        "1. Python\n"
        "2. SQL\n"
        "3. Power BI\n"
        "4. Data Storytelling\n"
        "5. ETL\n"
        "6. Machine Learning\n"
        "7. Conex√£o API\n\n"
        "üìç **e-mail**: [alissonmcesario@gmail.com](mailto:alissonmcesario@gmail.com)"
        "üìç **LinkedIn**: [alissonmcesario](https://www.linkedin.com/in/alissonmcesario)\n"
        "üìç **GitHub**: [MrSpectre1859](https://github.com/MrSpectre1859)"
    )

    # Bot√£o para voltar √† Home
    st.divider()
    if st.button("üè† Voltar para Home", use_container_width=False):
        st.session_state.page = "Home"


# -------------------------------------------------------------
# P√ÅGINA: CADASTRO DE FUNCION√ÅRIOS
# -------------------------------------------------------------
def page_cadastro():
    st.title("üìã Cadastro de Funcion√°rios")

    # Obtendo o maior EmployeeNumber existente para garantir n√∫meros √∫nicos
    if st.session_state.funcionarios.empty:
        max_employee_number = 1
    else:
        max_employee_number = st.session_state.funcionarios["EmployeeNumber"].max() + 1

    # Se√ß√£o de Cadastro de Funcion√°rios
    st.subheader("‚úçÔ∏è Cadastrar Novo Funcion√°rio")

    col1, col2, col3 = st.columns(3)

    with col1:
        idade = st.number_input("Idade", min_value=18, max_value=70, value=30)
        distance_home = st.number_input("Dist√¢ncia de Casa (km)", min_value=0, max_value=100, value=10)
        education = st.slider("Educa√ß√£o (1-B√°sico a 5-Doutorado)", 1, 5, 3)
        education_field = st.selectbox("√Årea de Forma√ß√£o", EDUCATION_FIELDS)

    with col2:
        department = st.selectbox("Departamento", DEPARTMENTS)
        job_role = st.selectbox("Cargo", JOB_ROLES)
        job_level = st.slider("N√≠vel do Cargo", 1, 5, 2)
        business_travel = st.selectbox("Frequ√™ncia de Viagem", BUSINESS_TRAVEL)
        marital_status = st.selectbox("Estado Civil", MARITAL_STATUS)

    with col3:
        gender = st.selectbox("G√™nero", ["Masculino", "Feminino"])
        over_time = st.selectbox("Faz Hora Extra?", ["Sim", "N√£o"])
        salary_hike = st.number_input("Aumento Salarial (%)", min_value=0, max_value=50, value=10)
        monthly_income = st.number_input("Sal√°rio Mensal", min_value=1000, max_value=50000, value=5000)
        monthly_rate = st.number_input("Taxa Mensal", min_value=1000, max_value=50000, value=10000)

    st.subheader("üìä Outros Indicadores")
    col4, col5, col6 = st.columns(3)

    with col4:
        num_companies_worked = st.number_input("N√∫mero de Empresas Trabalhadas", min_value=0, max_value=10, value=2)
        training_last_year = st.slider("Treinamentos no √öltimo Ano", 0, 10, 2)
        stock_option_level = st.slider("Op√ß√µes de A√ß√µes (0-3)", 0, 3, 1)

    with col5:
        years_at_company = st.slider("Anos na Empresa", 0, 40, 5)
        years_in_current_role = st.slider("Anos no Cargo Atual", 0, 20, 3)
        years_with_manager = st.slider("Anos com o Gestor Atual", 0, 20, 4)

    with col6:
        job_involvement = st.slider("Envolvimento no Trabalho (1-4)", 1, 4, 3)
        job_satisfaction = st.slider("Satisfa√ß√£o no Trabalho (1-4)", 1, 4, 3)
        environment_satisfaction = st.slider("Satisfa√ß√£o com o Ambiente (1-4)", 1, 4, 3)

    col_btn1, col_btn2 = st.columns([1, 1])

    # Adicionar novo funcion√°rio
    with col_btn1:
        if st.button("‚ûï Adicionar Funcion√°rio", use_container_width=True):
            novo_funcionario = pd.DataFrame([[
                max_employee_number, idade, business_travel, department, distance_home,
                education, education_field, environment_satisfaction, gender, random.randint(10, 50),
                job_involvement, job_level, job_role, job_satisfaction, marital_status,
                monthly_income, monthly_rate, num_companies_worked, over_time,
                salary_hike, 3, random.randint(1, 4), stock_option_level, years_at_company + random.randint(1, 10),
                random.randint(1, 40), training_last_year, random.randint(1, 4), years_at_company, years_in_current_role,
                years_at_company - years_in_current_role, years_with_manager
            ]], columns=st.session_state.funcionarios.columns)

            st.session_state.funcionarios = pd.concat([st.session_state.funcionarios, novo_funcionario], ignore_index=True)
            st.success(f"Funcion√°rio adicionado com sucesso!")

    # Gerar funcion√°rio aleat√≥rio
    with col_btn2:
        if st.button("üé≤ Gerar Dados Aleat√≥rios", use_container_width=True):
            novo_funcionario = pd.DataFrame([[  
                max_employee_number, random.randint(20, 60), random.choice(BUSINESS_TRAVEL),  
                random.choice(DEPARTMENTS), random.randint(1, 50), random.randint(1, 5), random.choice(EDUCATION_FIELDS),  
                random.randint(1, 4), random.choice(["Masculino", "Feminino"]), random.randint(10, 50), random.randint(1, 4),  
                random.randint(1, 5), random.choice(JOB_ROLES), random.randint(1, 4), random.choice(MARITAL_STATUS),  
                random.randint(3000, 20000), random.randint(5000, 30000), random.randint(0, 10),  
                random.choice(["Yes", "No"]), random.randint(0, 50), 3, random.randint(1, 4), random.randint(0, 3),  
                random.randint(1, 40),  
                random.randint(1, 40),
                random.randint(0, 10), random.randint(1, 4), random.randint(1, 40),  
                random.randint(1, 20), random.randint(0, 10), random.randint(1, 20)  
            ]], columns=st.session_state.funcionarios.columns)

            st.session_state.funcionarios = pd.concat([st.session_state.funcionarios, novo_funcionario], ignore_index=True)
            st.success("Funcion√°rio gerado aleatoriamente!")

    st.dataframe(st.session_state.funcionarios, use_container_width=True)

    # Bot√£o para voltar √† Home
    st.divider()
    if st.button("üè† Voltar para Home", use_container_width=False):
        st.session_state.page = "Home"

# -------------------------------------------------------------
# P√ÅGINA: CAT√ÅLOGO DE FUNCION√ÅRIOS
# -------------------------------------------------------------

def page_catalogo():
    st.title("üìã Cat√°logo de Funcion√°rios")

    # Caso ainda n√£o existam funcion√°rios cadastrados
    if st.session_state.funcionarios.empty:
        st.warning("‚ö†Ô∏è Nenhum funcion√°rio cadastrado ainda. Adicione novos funcion√°rios na aba Cadastro!")
        if st.button("üè† Voltar para Home", use_container_width=True):
            st.session_state.page = "Home"
        return

    # üîç Filtros Interativos
    st.subheader("üîç Filtros")
    col1, col2, col3 = st.columns(3)

    with col1:
        filtro_departamento = st.selectbox(
            "Filtrar por Departamento",
            ["Todos"] + list(st.session_state.funcionarios["Department"].unique())
        )

    with col2:
        filtro_cargo = st.selectbox(
            "Filtrar por Cargo",
            ["Todos"] + list(st.session_state.funcionarios["JobRole"].unique())
        )

    with col3:
        faixa_salarial = st.slider(
            "Filtrar por Faixa Salarial",
            int(st.session_state.funcionarios["MonthlyIncome"].min()),
            int(st.session_state.funcionarios["MonthlyIncome"].max()),
            (int(st.session_state.funcionarios["MonthlyIncome"].min()), int(st.session_state.funcionarios["MonthlyIncome"].max()))
        )

    # Aplicando os filtros na tabela
    df_filtrado = st.session_state.funcionarios.copy()

    if filtro_departamento != "Todos":
        df_filtrado = df_filtrado[df_filtrado["Department"] == filtro_departamento]

    if filtro_cargo != "Todos":
        df_filtrado = df_filtrado[df_filtrado["JobRole"] == filtro_cargo]

    df_filtrado = df_filtrado[
        (df_filtrado["MonthlyIncome"] >= faixa_salarial[0]) & 
        (df_filtrado["MonthlyIncome"] <= faixa_salarial[1])
    ]

    # üìå M√©tricas Gerais
    st.subheader("üìå M√©tricas Gerais")
    col_m1, col_m2, col_m3 = st.columns(3)

    with col_m1:
        st.metric("Total de Funcion√°rios", len(df_filtrado))

    with col_m2:
        st.metric("M√©dia Salarial", f"R$ {df_filtrado['MonthlyIncome'].mean():,.2f}")

    with col_m3:
        st.metric("Idade M√©dia", f"{df_filtrado['Age'].mean():.1f} anos")

    # üìã Exibi√ß√£o da Tabela
    st.subheader("üìã Funcion√°rios Cadastrados")
    st.dataframe(df_filtrado, use_container_width=True)

    # üóëÔ∏è Op√ß√£o para Excluir Funcion√°rio
    if not df_filtrado.empty:
        st.subheader("üóëÔ∏è Remover Funcion√°rio")
        funcionario_excluir = st.selectbox("Selecione um funcion√°rio para excluir", df_filtrado["EmployeeNumber"].tolist())

        if st.button("‚ùå Excluir", use_container_width=False):
            st.session_state.funcionarios = st.session_state.funcionarios[st.session_state.funcionarios["EmployeeNumber"] != funcionario_excluir]
            st.success(f"Funcion√°rio {funcionario_excluir} removido com sucesso!")
            st.rerun(scope="app")
    
    # Bot√£o para voltar √† Home
    st.divider()
    if st.button("üè† Voltar para Home", use_container_width=False):
        st.session_state.page = "Home"

# -------------------------------------------------------------
# P√ÅGINA: ANALYTICS
# -------------------------------------------------------------
import streamlit as st
import pandas as pd
import plotly.express as px
import joblib

@st.cache_resource
def load_model():
    try:
        return joblib.load("random_forest_model.pkl") 
    except Exception as e:
        st.error(f"Erro ao carregar o modelo: {e}")
        return None

@st.cache_data
def load_data():
    df = pd.read_csv("hr_dataset.csv")

    # ===========================================
    #           PROCESSAMENTO DE DADOS
    # ===========================================
    data_prep = df.copy()

    # Transforma√ß√µes manuais - Simple Encoding
    data_prep['BusinessTravel'] = data_prep['BusinessTravel'].map({'Travel_Frequently': 2, 'Travel_Rarely': 1, 'Non-Travel': 0})
    data_prep['Gender'] = data_prep['Gender'].map({'Male': 1, 'Female': 0})
    data_prep['OverTime'] = data_prep['OverTime'].map({'Yes': 1, 'No': 0})

    # One-Hot Encoding
    columns_to_dummy = ['Department', 'EducationField', 'JobRole', 'MaritalStatus']
    data_prep = pd.get_dummies(data_prep, columns=columns_to_dummy, drop_first=True, dtype='int64')

    # Criando vari√°vel target bin√°ria: Attrition_numerical
    data_prep['Attrition_numerical'] = data_prep['Attrition'].map({'Yes': 1, 'No': 0})

    # Removendo colunas desnecess√°rias
    cols_to_delete = ['Over18', 'StandardHours', 'EmployeeNumber', 'EmployeeCount', 'Attrition']
    data_prep.drop(cols_to_delete, axis=1, inplace=True)

    return df, data_prep

model = load_model()
df_original, df_prep = load_data()

@st.cache_resource
def get_explainer():
    return shap.Explainer(model, df_prep)

@st.cache_data
def compute_shap_values():
    with st.status("‚è≥ Estamos preparando o sistema para voc√™.\n\n Isso costuma levar 1 minuto!", expanded=True) as status:
        explainer = get_explainer()
        shap_values_all = explainer(df_prep)
        status.update(label="‚úÖ Sistema carregado com sucesso. Voc√™ j√° pode explorar os dados!", state="complete")
    return shap_values_all[..., 1]

shap_values_class1 = compute_shap_values()

def classify_risk(probs, low_threshold=0.10, medium_threshold=0.40):
    if probs < low_threshold:
        return "Baixo"
    elif probs < medium_threshold:
        return "Moderado"
    else:
        return "Alto"

def shap_func_id(funcionario_idx):
    "Gera a explica√ß√£o SHAP para um funcion√°rio espec√≠fico"
    # Obt√©m os valores SHAP para o conjunto de dados
    shap_values = shap_values_class1[funcionario_idx]  # √çndice do funcion√°rio
    shap_importances = np.abs(shap_values.values).flatten()
    
    # Pega os 3 principais fatores que mais influenciam a sa√≠da
    top_indices = np.argsort(shap_importances)[-3:]  # Top 3 fatores
    top_features = df_prep.columns[top_indices]

    return top_features.tolist()

def page_analytics():
    st.title("üìä Analytics - Previs√£o de Sa√≠da de Funcion√°rios")
    
    # Filtros interativos
    st.subheader("üîç Filtros")
    col1, col2 = st.columns(2)
    
    with col1:
        filtro_departamento = st.selectbox(
            "Departamento",
            ["Todos"] + list(df_original["Department"].unique())
        )
    
    with col2:
        filtro_cargo = st.selectbox(
            "Cargo",
            ["Todos"] + list(df_original["JobRole"].unique())
        )
    
    # Aplicando filtros
    df_filtrado = df_original.copy()
    
    if filtro_departamento != "Todos":
        df_filtrado = df_filtrado[df_filtrado["Department"] == filtro_departamento]
    if filtro_cargo != "Todos":
        df_filtrado = df_filtrado[df_filtrado["JobRole"] == filtro_cargo]
    
    df_filtrado_prep = df_prep.loc[df_filtrado.index].drop(columns=["Attrition_numerical"], errors="ignore")

    # Fazer previs√µes no conjunto filtrado
    df_filtrado["Risk_Score"] = model.predict_proba(df_filtrado_prep)[:, 1]
    df_filtrado["Risk_Level"] = df_filtrado["Risk_Score"].apply(lambda x: classify_risk(x))

    # KPIs
    st.subheader("üìå KPIs")
    col_kpi1, col_kpi2, col_kpi3 = st.columns(3)
    
    with col_kpi1:
        st.metric("Baixo Risco", (df_filtrado["Risk_Level"] == "Baixo").sum())
    with col_kpi2:
        st.metric("Risco Moderado", (df_filtrado["Risk_Level"] == "Moderado").sum())
    with col_kpi3:
        st.metric("Alto Risco", (df_filtrado["Risk_Level"] == "Alto").sum())
    
    # Gr√°ficos
    st.subheader("üìä Distribui√ß√£o de Risco")
    df_filtrado["Risk_Level"] = pd.Categorical(df_filtrado["Risk_Level"], categories=["Baixo", "Moderado", "Alto"], ordered=True)
    
    fig_risco = px.histogram(df_filtrado, x="Risk_Level", color="Risk_Level", title="Distribui√ß√£o de Risco")
    st.plotly_chart(fig_risco, use_container_width=True)
    
    fig_pie = px.pie(df_filtrado, names="Risk_Level", title="Propor√ß√£o de Risco")
    st.plotly_chart(fig_pie, use_container_width=True)
    
    # Exibir tabela de risco
    st.subheader("üìã Funcion√°rios e Classifica√ß√£o de Risco")
    st.dataframe(df_filtrado[["Risk_Score", "Risk_Level"]], use_container_width=True)
    
    # Adicionando um gr√°fico para visualizar a distribui√ß√£o salarial por n√≠vel de risco
    st.subheader("üí∞ Sal√°rio por N√≠vel de Risco")
    fig_box = px.box(df_filtrado, x="Risk_Level", y="MonthlyIncome", color="Risk_Level", title="Distribui√ß√£o Salarial por N√≠vel de Risco")
    st.plotly_chart(fig_box, use_container_width=True)

    # Sele√ß√£o de funcion√°rio para an√°lise individual
    st.subheader("üîç An√°lise Individual")
    if not df_filtrado.empty:
        funcionario_id = st.selectbox("Selecione um funcion√°rio para an√°lise", df_filtrado.index.tolist())
        func_detalhes = df_filtrado.loc[funcionario_id]

        st.write(f"**Funcion√°rio:** {funcionario_id}")
        st.write(f"**Score de Risco:** {func_detalhes['Risk_Score']:.2f}")
        st.write(f"**N√≠vel de Risco:** {func_detalhes['Risk_Level']}")
    else:
        st.warning("Nenhum funcion√°rio encontrado com os filtros selecionados.")
    
        # Explica√ß√£o SHAP
    st.subheader("üìå Explica√ß√£o SHAP")

    # Exibir Waterfall apenas para um funcion√°rio selecionado
    st.subheader("üìä Waterfall SHAP para o Funcion√°rio")
    valores_um_func = shap_values_class1[funcionario_id]
    fig1, ax1 = plt.subplots()
    shap.waterfall_plot(valores_um_func)
    st.pyplot(fig1)

    # Bar Plot Global
    st.subheader("üìä Bar Plot Global (Classe 1)")
    fig2, ax2 = plt.subplots()
    shap.summary_plot(shap_values_class1, df_prep, plot_type="bar", show=False)
    st.pyplot(fig2)

    # Beeswarm Plot Global
    st.subheader("üìä Beeswarm Plot Global (Classe 1)")
    fig3, ax3 = plt.subplots()
    shap.summary_plot(shap_values_class1, df_prep, show=False)
    st.pyplot(fig3)

    # Bot√£o para voltar √† Home
    st.divider()
    if st.button("üè† Voltar para Home", use_container_width=False):
        st.session_state.page = "Home"

# -------------------------------------------------------------
# P√ÅGINA : CHAT COM IA
# -------------------------------------------------------------

# Inicialize o cliente com sua chave de API
client = OpenAI(api_key="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")

# üìå Inicializar hist√≥rico de conversa na sess√£o
if "chat_history" not in st.session_state:
    st.session_state.chat_history = [{"role": "system", "content": "Como posso te ajudar hoje?"}]

def page_chat():
    st.title("üí¨ Chat com IA - People Analytics")

    # Sele√ß√£o do funcion√°rio
    funcionario_idx = st.selectbox("Selecione um funcion√°rio", list(range(len(df_original))))

    funcionario_info = df_original.iloc[funcionario_idx].to_dict()

    # Obt√©m a previs√£o do modelo para esse funcion√°rio
    funcionario_prep = df_prep.iloc[funcionario_idx:funcionario_idx+1].drop(columns="Attrition_numerical")
    risk_score = model.predict_proba(funcionario_prep)[:, 1][0]  # Probabilidade de sa√≠da
    risk_level = classify_risk(risk_score)  # Classifica√ß√£o de risco (baixo, moderado, alto)

    # Obt√©m os fatores SHAP mais relevantes
    fatores_importantes = shap_func_id(funcionario_idx)

    resultados_modelo = (
        f"- Probabilidade de sa√≠da: {risk_score:.2%}\n"
        f"- Classifica√ß√£o de risco: {risk_level}\n\n"
        f"Principais fatores que influenciam essa previs√£o:\n"
        f"1) {fatores_importantes[0]}\n"
        f"2) {fatores_importantes[1]}\n"
        f"3) {fatores_importantes[2]}\n"
    )

    user_message = st.text_area("Digite sua pergunta:")

    if st.button("Enviar"):
        if user_message.strip():
            # Criando o prompt inicial com dados do funcion√°rio
            mensagem_inicial = f"Os dados do funcion√°rio s√£o:\n{funcionario_info}\n\nSeguem os dados da previs√£o do modelo e explica√ß√£o SHAP:\n{resultados_modelo}\nPergunta do usu√°rio: {user_message}"

            # Adiciona ao hist√≥rico de conversa
            st.session_state.chat_history.append({"role": "user", "content": mensagem_inicial})

            try:
                resposta = client.chat.completions.create(
                    model="gpt-4-turbo",
                    messages=st.session_state.chat_history,
                    temperature=1,
                    max_tokens=2048,
                    top_p=1
                )

                resposta_texto = resposta.choices[0].message.content
                st.session_state.chat_history.append({"role": "assistant", "content": resposta_texto})

            except APIError as e:
                st.error(f"Erro da API OpenAI: {e}")
            except APIConnectionError as e:
                st.error(f"Erro de conex√£o com a OpenAI: {e}")
            except RateLimitError as e:
                st.error(f"Limite de requisi√ß√µes excedido: {e}")

    # Exibir o hist√≥rico da conversa
    for mensagem in st.session_state.chat_history:
        with st.chat_message(mensagem["role"]):
            st.write(mensagem["content"])

    # Bot√£o para resetar a conversa
    if st.button("Resetar Chat"):
        st.session_state.chat_history = [{"role": "system", "content": "Como posso te ajudar hoje?"}]
        st.rerun()
    
    # Bot√£o para voltar √† Home
    st.divider()
    if st.button("üè† Voltar para Home", use_container_width=False):
        st.session_state.page = "Home"

# -------------------------------------------------------------
# FUN√á√ÉO PRINCIPAL DE ROTEAMENTO
# -------------------------------------------------------------
def main():
    # Se 'page' n√£o existe ainda, definimos como 'Home'
    if "page" not in st.session_state:
        st.session_state.page = "Home"

    # Roteamento simples baseado em st.session_state.page
    if st.session_state.page == "Home":
        page_home()
    elif st.session_state.page == "Sobre":
        page_sobre()
    elif st.session_state.page == "Cadastro":
        page_cadastro()
    elif st.session_state.page == "Cat√°logo":
        page_catalogo()
    elif st.session_state.page == "Analytics":
        page_analytics()
    elif st.session_state.page == "Chat":
        page_chat()
    else:
        st.session_state.page = "Home"
        st.error("P√°gina n√£o encontrada. Voltando para a Home.")


# -------------------------------------------------------------
# PONTO DE ENTRADA
# -------------------------------------------------------------
if __name__ == "__main__":
    main()
